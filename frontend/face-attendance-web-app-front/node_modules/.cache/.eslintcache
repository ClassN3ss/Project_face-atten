[{"D:\\Face_attendent_web\\face-attendance-web-app-react-python\\frontend\\face-attendance-web-app-front\\src\\index.js":"1","D:\\Face_attendent_web\\face-attendance-web-app-react-python\\frontend\\face-attendance-web-app-front\\src\\App.js":"2","D:\\Face_attendent_web\\face-attendance-web-app-react-python\\frontend\\face-attendance-web-app-front\\src\\MasterComponent.js":"3","D:\\Face_attendent_web\\face-attendance-web-app-react-python\\frontend\\face-attendance-web-app-front\\src\\API.js":"4","D:\\Test_face_recon_web\\Project_face-atten\\frontend\\face-attendance-web-app-front\\src\\index.js":"5","D:\\Test_face_recon_web\\Project_face-atten\\frontend\\face-attendance-web-app-front\\src\\App.js":"6","D:\\Test_face_recon_web\\Project_face-atten\\frontend\\face-attendance-web-app-front\\src\\MasterComponent.js":"7","D:\\Test_face_recon_web\\Project_face-atten\\frontend\\face-attendance-web-app-front\\src\\API.js":"8"},{"size":267,"mtime":1727599277304,"results":"9","hashOfConfig":"10"},{"size":229,"mtime":1727599277304,"results":"11","hashOfConfig":"10"},{"size":11771,"mtime":1727599277304,"results":"12","hashOfConfig":"10"},{"size":69,"mtime":1727599277303,"results":"13","hashOfConfig":"10"},{"size":267,"mtime":1727599277304,"results":"14","hashOfConfig":"15"},{"size":229,"mtime":1727599277304,"results":"16","hashOfConfig":"15"},{"size":11771,"mtime":1727599277304,"results":"17","hashOfConfig":"15"},{"size":69,"mtime":1727599277303,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k292h",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"uzlcji",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Face_attendent_web\\face-attendance-web-app-react-python\\frontend\\face-attendance-web-app-front\\src\\index.js",[],[],"D:\\Face_attendent_web\\face-attendance-web-app-react-python\\frontend\\face-attendance-web-app-front\\src\\App.js",[],[],"D:\\Face_attendent_web\\face-attendance-web-app-react-python\\frontend\\face-attendance-web-app-front\\src\\MasterComponent.js",["44","45","46","47","48","49"],[],"D:\\Face_attendent_web\\face-attendance-web-app-react-python\\frontend\\face-attendance-web-app-front\\src\\API.js",[],[],"D:\\Test_face_recon_web\\Project_face-atten\\frontend\\face-attendance-web-app-front\\src\\index.js",[],[],"D:\\Test_face_recon_web\\Project_face-atten\\frontend\\face-attendance-web-app-front\\src\\App.js",[],[],"D:\\Test_face_recon_web\\Project_face-atten\\frontend\\face-attendance-web-app-front\\src\\MasterComponent.js",["50","51","52","53","54","55"],[],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport API_BASE_URL from \"./API\";\r\n\r\nlet videoRef;\r\nlet canvasRef;\r\nlet context;\r\n\r\nfunction MasterComponent() {\r\n  let [lastFrame, setLastFrame] = useState(null);\r\n  const [showWebcam, setShowWebcam] = useState(true);\r\n  const [showImg, setShowImg] = useState(false);\r\n\r\n  function register_new_user_ok(text) {\r\n    if (lastFrame) {\r\n      const apiUrl = API_BASE_URL + \"/register_new_user?text=\" + text;\r\n      console.log(typeof lastFrame);\r\n      fetch(lastFrame)\r\n        .then((response) => response.blob())\r\n        .then((blob) => {\r\n          const file = new File([blob], \"webcam-frame.png\", {\r\n            type: \"image/png\",\r\n          });\r\n          const formData = new FormData();\r\n          formData.append(\"file\", file);\r\n\r\n          axios\r\n            .post(apiUrl, formData, {\r\n              headers: {\r\n                \"Content-Type\": \"multipart/form-data\",\r\n              },\r\n            })\r\n            .then((response) => {\r\n              console.log(response.data);\r\n              if (response.data.registration_status == 200) {\r\n                alert(\"User was registered successfully!\");\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.error(\"Error sending image to API:\", error);\r\n            });\r\n        });\r\n    }\r\n  }\r\n\r\n  async function downloadLogs() {\r\n    const response = await axios.get(API_BASE_URL + \"/get_attendance_logs\", {\r\n      responseType: \"blob\",\r\n    });\r\n\r\n    const url = window.URL.createObjectURL(new Blob([response.data]));\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    link.setAttribute(\"download\", \"logs.zip\");\r\n    document.body.appendChild(link);\r\n    link.click();\r\n  }\r\n\r\n  function send_img_login() {\r\n    if (videoRef.current && canvasRef.current) {\r\n      context = canvasRef.current.getContext(\"2d\");\r\n      context.drawImage(videoRef.current, 0, 0, 400, 300);\r\n\r\n      canvasRef.current.toBlob((blob) => {\r\n        // setLastFrame(URL.createObjectURL(blob));\r\n\r\n        // Your edition here\r\n\r\n        const apiUrl = API_BASE_URL + \"/login\";\r\n        const file = new File([blob], \"webcam-frame.png\", {\r\n          type: \"image/png\",\r\n        });\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        axios\r\n          .post(apiUrl, formData, {\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\",\r\n            },\r\n          })\r\n          .then((response) => {\r\n            console.log(response.data);\r\n            if (response.data.match_status == true) {\r\n              alert(\"Welcome back \" + response.data.user + \" !\");\r\n            } else {\r\n              alert(\"Unknown user! Please try again or register new user!\");\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error sending image to API:\", error);\r\n          });\r\n      });\r\n    }\r\n  }\r\n\r\n  function send_img_logout() {\r\n    if (videoRef.current && canvasRef.current) {\r\n      context = canvasRef.current.getContext(\"2d\");\r\n      context.drawImage(videoRef.current, 0, 0, 400, 300);\r\n\r\n      canvasRef.current.toBlob((blob) => {\r\n        // setLastFrame(URL.createObjectURL(blob));\r\n\r\n        // Your edition here\r\n\r\n        const apiUrl = API_BASE_URL + \"/logout\";\r\n        const file = new File([blob], \"webcam-frame.png\", {\r\n          type: \"image/png\",\r\n        });\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        axios\r\n          .post(apiUrl, formData, {\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\",\r\n            },\r\n          })\r\n          .then((response) => {\r\n            console.log(response.data);\r\n            if (response.data.match_status == true) {\r\n              alert(\"Goodbye \" + response.data.user + \" !\");\r\n            } else {\r\n              alert(\"Unknown user! Please try again or register new user!\");\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error sending image to API:\", error);\r\n          });\r\n      });\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"master-component\">\r\n      {showWebcam ? (\r\n        <Webcam lastFrame={lastFrame} setLastFrame={setLastFrame} />\r\n      ) : (\r\n        <img className=\"img\" src={lastFrame} />\r\n      )}\r\n      <Buttons\r\n        lastFrame={lastFrame}\r\n        setLastFrame={setLastFrame}\r\n        setShowWebcam={setShowWebcam}\r\n        showWebcam={showWebcam}\r\n        setShowImg={setShowImg}\r\n        send_img_login={send_img_login}\r\n        send_img_logout={send_img_logout}\r\n        register_new_user_ok={register_new_user_ok}\r\n        downloadLogs={downloadLogs}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction saveLastFrame(\r\n  canvasRef,\r\n  lastFrame,\r\n  setLastFrame,\r\n  setShowWebcam,\r\n  showWebcam,\r\n  setShowImg\r\n) {\r\n  requestAnimationFrame(() => {\r\n    console.log(context);\r\n\r\n    if (!showWebcam && lastFrame) {\r\n      setShowImg(true);\r\n    } else {\r\n      setShowImg(false);\r\n    }\r\n\r\n    if (videoRef.current && canvasRef.current) {\r\n      context = canvasRef.current.getContext(\"2d\");\r\n      context.drawImage(videoRef.current, 0, 0, 400, 300);\r\n\r\n      canvasRef.current.toBlob((blob) => {\r\n        setLastFrame(URL.createObjectURL(blob));\r\n        // lastFrame = blob.slice(); // Your edition here\r\n      });\r\n      setShowWebcam(false);\r\n      setShowImg(true);\r\n    }\r\n  }, [showWebcam]);\r\n}\r\n\r\nfunction Webcam({ lastFrame, setLastFrame }) {\r\n  videoRef = useRef(null);\r\n  canvasRef = useRef(null);\r\n  const [isStreaming, setIsStreaming] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const setupCamera = async () => {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n      videoRef.current.srcObject = stream;\r\n      setIsStreaming(true);\r\n    };\r\n    if (!isStreaming) {\r\n      setupCamera();\r\n    }\r\n  }, [isStreaming]);\r\n\r\n  useEffect(() => {\r\n    if (isStreaming) {\r\n      context = canvasRef.current.getContext(\"2d\");\r\n      context.drawImage(videoRef.current, 0, 0, 400, 300);\r\n\r\n      requestAnimationFrame(() => {\r\n        setTimeout(() => {\r\n          context.drawImage(videoRef.current, 0, 0, 400, 300);\r\n\r\n          canvasRef.current.toBlob((blob) => {\r\n            setLastFrame(URL.createObjectURL(blob));\r\n            lastFrame = blob.slice(); // Your edition here\r\n          });\r\n        }, 33);\r\n      });\r\n    }\r\n  }, [isStreaming]);\r\n\r\n  return (\r\n    <div className=\"webcam\">\r\n      <canvas ref={canvasRef} width={400} height={300} />\r\n      <video ref={videoRef} autoPlay playsInline />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Buttons({\r\n  lastFrame,\r\n  setLastFrame,\r\n  setShowWebcam,\r\n  showWebcam,\r\n  setShowImg,\r\n  send_img_login,\r\n  send_img_logout,\r\n  register_new_user_ok,\r\n  downloadLogs,\r\n}) {\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  const [zIndexAdmin, setZIndexAdmin] = useState(1);\r\n  const [zIndexRegistering, setZIndexRegistering] = useState(1);\r\n\r\n  const changeZIndexAdmin = (newZIndex) => {\r\n    setZIndexAdmin(newZIndex);\r\n  };\r\n\r\n  const changeZIndexRegistering = (newZIndex) => {\r\n    setZIndexRegistering(newZIndex);\r\n  };\r\n\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const resetTextBox = () => {\r\n    setValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"buttons-container\">\r\n      <div\r\n        className={`${\r\n          isRegistering ? \"visible\" : \"hidden\"\r\n        } register-text-container`}\r\n        style={{\r\n          zIndex: zIndexRegistering,\r\n        }}\r\n      >\r\n        <input\r\n          className=\"register-text\"\r\n          type=\"text\"\r\n          placeholder=\"Enter user name\"\r\n          value={value}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div\r\n        className=\"register-ok-container\"\r\n        style={{\r\n          zIndex: zIndexRegistering,\r\n        }}\r\n      >\r\n        <button\r\n          className={`${\r\n            isRegistering ? \"visible\" : \"hidden\"\r\n          } register-ok-button`}\r\n          onClick={async () => {\r\n            setIsAdmin(false);\r\n            setIsRegistering(false);\r\n\r\n            changeZIndexAdmin(1);\r\n            changeZIndexRegistering(1);\r\n\r\n            setShowWebcam(true);\r\n            setShowImg(false);\r\n            register_new_user_ok(value);\r\n          }}\r\n        ></button>\r\n      </div>\r\n      <div\r\n        className=\"register-cancel-container\"\r\n        style={{\r\n          zIndex: zIndexRegistering,\r\n        }}\r\n      >\r\n        <button\r\n          className={`${\r\n            isRegistering ? \"visible\" : \"hidden\"\r\n          } register-cancel-button`}\r\n          onClick={async () => {\r\n            setIsAdmin(false);\r\n            setIsRegistering(false);\r\n\r\n            changeZIndexAdmin(1);\r\n            changeZIndexRegistering(1);\r\n\r\n            setShowWebcam(true);\r\n            setShowImg(false);\r\n          }}\r\n        ></button>\r\n      </div>\r\n      <div className=\"login-container\">\r\n        <button\r\n          className={`${\r\n            isAdmin || isRegistering ? \"hidden\" : \"visible\"\r\n          } login-button`}\r\n          onClick={async () => {\r\n            // saveFrameToDisk(canvasRef, lastFrame, setLastFrame);\r\n            // setIsRegistering(true);\r\n            send_img_login();\r\n          }}\r\n        ></button>\r\n      </div>\r\n      <div className=\"logout-container\">\r\n        <button\r\n          className={`${\r\n            isAdmin || isRegistering ? \"hidden\" : \"visible\"\r\n          } logout-button`}\r\n          onClick={() => {\r\n            send_img_logout();\r\n          }}\r\n        ></button>\r\n      </div>\r\n      <div className=\"admin-container\">\r\n        <button\r\n          className={`${\r\n            isAdmin || isRegistering ? \"hidden\" : \"visible\"\r\n          } admin-button`}\r\n          onClick={() => {\r\n            setIsAdmin(true);\r\n            setIsRegistering(false);\r\n\r\n            changeZIndexAdmin(3);\r\n            changeZIndexRegistering(1);\r\n          }}\r\n        ></button>\r\n      </div>\r\n      <div\r\n        className=\"register-container\"\r\n        style={{\r\n          zIndex: zIndexAdmin,\r\n        }}\r\n      >\r\n        <button\r\n          className={`${isAdmin ? \"visible\" : \"hidden\"} register-button`}\r\n          onClick={() => {\r\n            setIsAdmin(false);\r\n            setIsRegistering(true);\r\n\r\n            changeZIndexAdmin(1);\r\n            changeZIndexRegistering(3);\r\n\r\n            saveLastFrame(\r\n              canvasRef,\r\n              lastFrame,\r\n              setLastFrame,\r\n              setShowWebcam,\r\n              showWebcam,\r\n              setShowImg\r\n            );\r\n            resetTextBox();\r\n\r\n          }}\r\n        ></button>\r\n      </div>\r\n      <div\r\n        className=\"goback-container\"\r\n        style={{\r\n          zIndex: zIndexAdmin,\r\n        }}\r\n      >\r\n        <button\r\n          className={`${isAdmin ? \"visible\" : \"hidden\"} goback-button`}\r\n          onClick={() => {\r\n            setIsAdmin(false);\r\n            setIsRegistering(false);\r\n\r\n            changeZIndexAdmin(1);\r\n            changeZIndexRegistering(1);\r\n          }}\r\n        ></button>\r\n      </div>\r\n\r\n      <div\r\n        className=\"download-container\"\r\n        style={{\r\n          zIndex: zIndexAdmin,\r\n        }}\r\n      >\r\n        <button\r\n          className={`${isAdmin ? \"visible\" : \"hidden\"} download-button`}\r\n          onClick={() => {\r\n            setIsAdmin(false);\r\n            setIsRegistering(false);\r\n\r\n            changeZIndexAdmin(1);\r\n            changeZIndexRegistering(1);\r\n\r\n            downloadLogs();\r\n          }}\r\n        ></button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default MasterComponent;\r\n","D:\\Test_face_recon_web\\Project_face-atten\\frontend\\face-attendance-web-app-front\\src\\API.js",[],[],{"ruleId":"56","severity":1,"message":"57","line":12,"column":10,"nodeType":"58","messageId":"59","endLine":12,"endColumn":17},{"ruleId":"60","severity":1,"message":"61","line":35,"column":53,"nodeType":"62","messageId":"63","endLine":35,"endColumn":55},{"ruleId":"60","severity":1,"message":"61","line":84,"column":44,"nodeType":"62","messageId":"63","endLine":84,"endColumn":46},{"ruleId":"60","severity":1,"message":"61","line":122,"column":44,"nodeType":"62","messageId":"63","endLine":122,"endColumn":46},{"ruleId":"64","severity":1,"message":"65","line":139,"column":9,"nodeType":"66","endLine":139,"endColumn":48},{"ruleId":"67","severity":1,"message":"68","line":214,"column":25,"nodeType":"69","endLine":214,"endColumn":37},{"ruleId":"56","severity":1,"message":"57","line":12,"column":10,"nodeType":"58","messageId":"59","endLine":12,"endColumn":17},{"ruleId":"60","severity":1,"message":"61","line":35,"column":53,"nodeType":"62","messageId":"63","endLine":35,"endColumn":55},{"ruleId":"60","severity":1,"message":"61","line":84,"column":44,"nodeType":"62","messageId":"63","endLine":84,"endColumn":46},{"ruleId":"60","severity":1,"message":"61","line":122,"column":44,"nodeType":"62","messageId":"63","endLine":122,"endColumn":46},{"ruleId":"64","severity":1,"message":"65","line":139,"column":9,"nodeType":"66","endLine":139,"endColumn":48},{"ruleId":"67","severity":1,"message":"68","line":214,"column":25,"nodeType":"69","endLine":214,"endColumn":37},"no-unused-vars","'showImg' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","Assignments to the 'lastFrame' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression"]